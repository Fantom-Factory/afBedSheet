
rename *ResponseProcessor -> *Processor ... ?

contribute ranges to HttpStatusProcessor?? - Naa, can't be arsed. Use case?



Why BedSheet 1.2.0???
---------------------

The Route Matching process was overly complicated and had one too many levels of re-direction / abstraction. That 
coupled with the fact it couldn't process simple instructions like, return file X for uri Y, or redirect to P from uri 
Q. The current system forced you to go through a handler method - which should be an intermediate case, not the norm!

With my own websites I tended to use filters quite heavily and only needed Routes for the simple cases - which it 
failed!    



For BedSheet 1.2.2
------------------

Doc customising the ErrPrinters! Make them public?

Have afIoc call the RouteHandlers so they can take services.
 - not urgent as handlers can @Inject services

BedClient (test) post reqs and req.in

Logging filter with reqId, SessId and configurable userId

Err500 - have filter stack frames checkbox?

	static Void main(Str[] args) {
		kB := Unit.fromStr("kB")
		b := Unit.fromStr("byte")
	
		size := kB.convertTo(3f, b)
		Env.cur.err.printLine(size)
	}

make HttpRequestWrapper / HttpResponseWrapper public?

Remove req.cookies and res.cookies and replace with intelligent HttpCookies service

Front more services with mixins

Future
------

static files & pod files served under 'hash' folder
 - Asset class, File field and genned file field
 
template files served under version number

RequireJS module support 

Tale integration - http://fantom.org/sidewalk/topic/1290
 - templates
 - routing
 - the JS compiler! A bloody neat idea!
 - anything else?
 
Create an afBedSheetProtection pod, based on Rubys Rack::Protection



Doc Comments
------------
Play on words from Tapestry, and Fantom ghosty wears a BedSheet! Wot Fantom wears!

"A web app framework that gets you horizontal. What's your favourite position?"

horizonal not vertical - other frameworks make you extend their classes, not BedSheet.


Powerful.
Built in a modular way with [afIoc]`http://repo.status302.com/doc/afIoc/#overview` meaning every service maybe wrapped,
decorated, replaced or deleted! It makes hard tasks, easy.

Flexible.
Show a developer a really cool feature and the first response is usually, "Wow, that's awewome! ... But how do I turn it off?"
With that in mind, BedSheet is reluctant

Simple.
Developers are lazy. If it's complicated or difficult, they won't use it.





Using Draft Routes [#usingDraftRoutes]
======================================
If you prefer the [draft]`https://bitbucket.org/afrankvt/draft` style of routing, that's no problem, you can use draft Routes
in BedSheet!

Just add [afBedSheetDraft]`https://bitbucket.org/AlienFactor/afbedsheetdraft` and [draft]`https://bitbucket.org/afrankvt/draft`
as dependencies in your 'build.fan' (no config required!). Now you can contribute draft routes to BedSheet:

pre>
using draft::Route as DraftRoute

@Contribute { serviceType=Routes# }
static Void contributeRoutes(OrderedConfig conf) {

  conf.add(DraftRoute("/", "GET", PageHandler#index))
  conf.add(DraftRoute("/echo/{name}/{age}", "GET", PageHandler#print))
}
<pre
